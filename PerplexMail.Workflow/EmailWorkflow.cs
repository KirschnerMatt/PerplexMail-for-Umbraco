using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Umbraco.Forms.Core;
using Umbraco.Forms.Core.Enums;
using System.Text.RegularExpressions;
using System.IO;
using Umbraco.Forms.Data.Storage;

namespace PerplexMail.UmbracoForms
{
    public class EmailWorkflow : Umbraco.Forms.Core.WorkflowType
    {
        public EmailWorkflow()
        {
            this.Name = "Send PerplexMail";
            this.Id = new Guid("A6A2C4F6-CF89-11DE-1045-5BB025383108");
            this.Description = "Sends an PerplexMail email";
        }

        [Umbraco.Forms.Core.Attributes.Setting("Email", description = "The email that should be sent", view = "Pickers.Content")]
        public string Email { get; set; } 

        public override WorkflowExecutionStatus Execute(Record record, RecordEventArgs e)
        {
            var emailTags = new List<EmailTag>();

            var labelsAndValues = record
                .RecordFields
                .Values
                .ToDictionary(r => r.Field.Caption, ParseRecordField);

            // We voegen ook een speciale tag toe met daarin alle labels en waardes
            var autogeneratedForm = string.Join("<br/><br/>", labelsAndValues.Select(kv => "<strong>" + kv.Key + "</strong>: " + kv.Value.Value));

            // E-mailtags zijn dus de individuele tags en de tag met daarin alles
            emailTags.AddRange(labelsAndValues.Values);

            emailTags.Add(new EmailTag("[#formsautogenerate#]", autogeneratedForm));

            //#region Encrypt
            //// Update values
            //foreach (RecordField rf in record.RecordFields.Values)
            //{
            //    var fieldValue = rf.ValuesAsString();

            //    rf.Values[0] = PerplexMail.Security.Encrypt(rf.ValuesAsString());

            //    fieldValue = rf.ValuesAsString();
            //}

            //// Save
            //RecordStorage rs = new RecordStorage();
            //record.State = FormState.Approved;
            //rs.UpdateRecord(record, e.Form);
            //rs.UpdateRecordXml(record, e.Form);
            //#endregion

            PerplexMail.Email.SendUmbracoEmail(int.Parse(Email), emailTags);          

            return WorkflowExecutionStatus.Completed;
        }

        private EmailTag ParseRecordField(RecordField recordField)
        {
            string tag = "[#" + recordField.Field.Caption + "#]";

            // Over het algemeen hebben we de eerste waarde nodig, we handelen hier meteen
            // de case af dat de waarde niet is meegestuurd en/of null is.
            string value = recordField.Values.Count == 0 || recordField.Values[0] == null
                ? ""
                : recordField.Values[0].ToString();

            // Hoe we de value uitlezen is afhankelijk van het datatype
            // Tevens is het doormiddel van deze splitsing mogelijk om in de toekomst
            // eenvoudig om bepaalde datatypes anders te behandelen dan simpelweg een .ToString()
            switch (recordField.Field.FieldType.Name)            
            {
                case "CheckBox":
                    // Bij een checkbox gaat het om een boolean waarde, deze geven we dus ook als zodanig terug en niet als string
                    return new EmailTag(tag, bool.Parse(value));                    

                case "Textarea":
                    // Newlines vervangen door HTMl newlines                    
                    value = value.Replace("\n", "<br/>");
                    break;
                case "DatePicker":
                    // De .ToString van de DateTime moeten we wellicht instelbaar maken in de WorkFlow
                    // Dan kan je per formulier aangeven hoe de datum naar een string moet worden omgezet
                    if (value != "")
                    {
                        DateTime dateTime;
                        if (DateTime.TryParse(value, out dateTime))
                        {
                            value = dateTime.ToShortDateString();
                        }
                        else
                        {
                            value = "The DatePicker value could not be parsed into a DateTime instance. The DatePicker value was " + value;
                        }                     
                    }                    
                    break;
                case "File upload":
                    if (value != "")
                    {
                        string filePath = value;
                        // Eventueel iets doen met geüpload bestand

                        // Voor nu de bestandsnaam doorgeven aan de e-mailpackage
                        value = Path.GetFileName(filePath);                    
                    }
                    
                    break;

                // Onderstaande cases worden ofwel de stringwaarde (bij 1 waarde), 
                // ofwel een kommagescheiden lijst van de stringwaardes (bij 2+ waardes)
                // Ze vallen allemaal in de default case
                // In de toekomst eenvoudig aan te passen omdat ze er allemaal al expliciet zijn genoemd
                case "CheckBoxList":
                case "DropDownList":
                case "HiddenField":
                case "Password Field":
                case "RadioButtonList":
                case "Textfield":                  
                
                default: 
                    value = string.Join(", ", recordField.Values.Where(v => v != null).Select(v => v.ToString()));
                    break;
            }

            return new EmailTag(tag, value);
        }

        public override List<Exception> ValidateSettings()
        {
            var exceptions = new List<Exception>();
            int emailId = 0;
            if (!int.TryParse(Email, out emailId))
            {
                exceptions.Add(new Exception("No email node has been selected"));
            }   
            
            return exceptions;
        }
    }
}